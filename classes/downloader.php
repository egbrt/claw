<?php
/*
    Classification Workbench
    Copyright (c) 2020-2022, WONCA ICPC-3 Foundation

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

class Downloader {
    public $errors;
    public $claml;
    public $changelog;
    private $topCategory;
    private $topModifier;
    private $getCore;
    private $getExtensions;

    function __construct()
    {
        $this->errors = "";
        $this->claml = "";
        $this->changelog = "";
        $this->getCore = false;
        $this->getExtensions = false;
        $this->includeHiddenRubrics = false;
        $this->hiddenRubrics = array();
    }


    function createClaML($db)
    {
        $db->getScheme($title, $date, $version, $subversion, $authors);
        $this->claml = './downloads/' . $title . '_' . $version . '_' . $subversion . '.xml';
        if (file_exists($this->claml)) {
            unlink($this->claml);
        }
        $file = fopen($this->claml, 'w');
        if ($file) {
            $this->topCategory = $db->getTopCategory();
            $this->topModifier = $db->getTopModifier();
            fwrite($file, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n");
            fwrite($file, "<!-- Generated by The Classification Workbench according to EN 14463 -->\n\n");
            fwrite($file, "<!DOCTYPE ClaML SYSTEM \"http://clam.eggbird.eu/download/EN14463-2007.dtd\">\n");
            fwrite($file, "<ClaML version=\"2.0.0\">\n");
            $this->writeTitle($file, $title, $date, $version);
            $this->writeAuthors($file, $authors);
            $this->writeCKinds($db, $file);
            $this->writeRKinds($db, $file);
            $this->writeModifiers($db, $file);
            $this->writeClasses($db, $file);
            fwrite($file, "</ClaML>\n");
            fclose($file);
        }
    }
    
    
    function writeChangeLog($db)
    {
        $this->getHiddenRubrics($db);
        $db->getScheme($title, $date, $version, $subversion, $authors);
        $this->changelog = './downloads/changelog_' . $title . '_' . $version . '_' . $subversion . '.csv';
        if (file_exists($this->changelog)) {
            unlink($this->changelog);
        }
        $file = fopen($this->changelog, 'w');
        if ($file) {
            if ($rows = $db->changes->selectInOrder()) {
                fwrite($file, "\"Time\",\"Author\",\"Class\",\"What\",\"Old\",\"New\"\n");
                foreach ($rows as $row) {
                    if ($this->includeChange($row['what'])) {
                        fwrite($file, "\"" . $row['time'] . "\",");
                        fwrite($file, "\"" . getShortUserName($db->con, $row['user']) . "\",");
                        $code = '';
                        if ($row['class'] != '') $code = $row['class'];
                        fwrite($file, "\"" . $code . "\",");
                        fwrite($file, "\"" . $row['what'] . "\",");
                        fwrite($file, "\"" . $row['oldText'] . "\",");
                        fwrite($file, "\"" . $row['newText'] . "\"\n");
                    }
                }
            }
            fclose($file);
        }
    }
    
    
    function writeChangeLogAsHTML($db)
    {
        $db->getScheme($title, $date, $version, $subversion, $authors);
        $this->changelog = './downloads/changelog_' . $title . '_' . $version . '_' . $subversion . '.html';
        if (file_exists($this->changelog)) {
            unlink($this->changelog);
        }
        $file = fopen($this->changelog, 'w');
        if ($file) {
            if ($rows = $db->changes->selectByCode()) {
                fwrite($file,"<!DOCTYPE HTML>\n");
                fwrite($file,"<html>\n");
                fwrite($file,"<head>\n");
                fwrite($file,"\t<title>" . $title . "</title>\n");
                fwrite($file,"\t<meta name=\"author\" content=\"");
                foreach ($authors as $author) {
                    fwrite($file,$author);
                    fwrite($file," ");
                }
                fwrite($file,"\">\n");
                fwrite($file,"</head>\n");
                fwrite($file,"<body>\n");

                fwrite($file,"<h1>" . $title . "</h1>\n");
                $prevCode = "";
                $prevWhat = "";
                $main = $this;
                foreach ($rows as $row) {
                    if ($this->includeChange($row['what'])) {
                        $code = '';
                        if ($row['class'] != '') $code = $row['class'];
                        if (strcmp($code, $prevCode) != 0) {
                            fwrite($file,"<h2>" . $code . "</h2>\n");
                            $prevCode = $code;
                        }
                        if (strcmp($row['what'], $prevWhat) != 0) {
                            fwrite($file,"<h3>" . $row['what'] . "</h3>\n");
                            $prevWhat = $row['what'];
                        }
                        if ($row['what'] == "New class") {
                        }
                        elseif (substr($row['what'], 0, 3) == "New") {
                            fwrite($file,"<p>" . htmlspecialchars($row['newText']) . "</p>\n");
                        }
                        elseif (strpos($row['what'], "deleted")) {
                            fwrite($file,"<p>" . htmlspecialchars($row['oldText']) . "</p>\n");
                        }
                        else {
                            fwrite($file,"<p>old: " . htmlspecialchars($row['oldText']) . "<br/>\n");
                            fwrite($file,"new: " . htmlspecialchars($row['newText']) . "</p>\n");
                        }
                    }
                }

                fwrite($file,"</body>\n");
                fwrite($file,"</html>\n");
            }
            fclose($file);
        }
    }
    
    private function getHiddenRubrics($db)
    {
        if (!$this->includeHiddenRubrics) {
            if ($rows = $db->rkinds->getAll()) {
                foreach ($rows as $row) {
                    if ($row['name'][0] == '.') {
                        array_push($this->hiddenRubrics, substr($row['name'], 1));
                    }
                }
            }
        }
    }
    
    
    private function includeChange($what)
    {
        $include = true;
        if (!$this->includeHiddenRubrics) {
            if ($what != "") {
                $rkind = "";
                if (str_starts_with($what, "New")) {
                    $rkind = substr($what, 4);
                }
                else {
                    $rkind = substr($what, 0, strpos($what, ' '));
                }
                $include = !in_array($rkind, $this->hiddenRubrics);
            }
        }
        return $include;
    }

    
    private function writeTitle($file, $title, $date, $version)
    {
        fwrite($file, "\t<Title");
        if ($title != '') fwrite($file, " name=\"" . $title . "\"");
        if ($date != '') fwrite ($file, " date=\"" . $date . "\"");
        if ($version != '') fwrite($file, " version=\"" . $version . "\"");
        fwrite($file, ">" . $title . "</Title>\n");
    }
    
    
    private function writeAuthors($file, $authors)
    {
        if (count($authors) > 0) {
            fwrite($file, "\t<Authors>\n");
            foreach ($authors as $author) {
                fwrite($file, "\t\t<Author>" . $author . "</Author>\n");
            }
            fwrite($file, "\t</Authors>\n");
        }
    }
    
    
    private function writeCKinds($db, $file)
    {
        if (!$this->getExtensions) {
            fwrite($file, "\t<ClassKinds>\n");
            if ($rows = $db->ckinds->getAll()) {
                foreach ($rows as $row) {
                    fwrite($file, "\t\t<ClassKind name=\"" . $row['name'] . "\"");
                    if ($row['display'] == '') {
                        fwrite($file, "/>\n");
                    }
                    else {
                        fwrite($file, ">\n");
                        fwrite($file, "\t\t\t<Display xml:lang=\"en\">" . $row['display'] . "</Display>\n");
                        fwrite($file, "\t\t</ClassKind>\n");
                    }
                }
            }
            fwrite($file, "\t</ClassKinds>\n");
        }
    }
    
    
    private function writeRKinds($db, $file)
    {
        if (!$this->getExtensions) {
            fwrite($file, "\t<RubricKinds>\n");
            if ($rows = $db->rkinds->getAll()) {
                foreach ($rows as $row) {
                    $rkind = $row['name'];
                    if (($this->includeHiddenRubrics) and ($rkind[0] == '.')) {
                        $rkind = substr($rkind, 1);
                    }
                    if ($rkind[0] != '.') {
                        fwrite($file, "\t\t<RubricKind name=\"" . $rkind . "\"");
                        if ($row['display'] == '') {
                            fwrite($file, "/>\n");
                        }
                        else {
                            fwrite($file, ">\n");
                            fwrite($file, "\t\t\t<Display xml:lang=\"en\">" . $row['display'] . "</Display>\n");
                            fwrite($file, "\t\t</RubricKind>\n");
                        }
                    }
                }
            }
            fwrite($file, "\t</RubricKinds>\n");
        }
    }
    
    
    private function writeModifiers($db, $file)
    {
        if ($rows = $db->nodes->selectChildren($this->topModifier->id)) {
            $subs = array();
            foreach ($rows as $row) {
                $modifier = $db->nodes->get($row['id']);
                fwrite($file, "\t<Modifier code=\"" . $modifier->code . "\">\n");
                $this->writeSubClasses($db, $file, $row['id'], $subs);
                $this->writeRubrics($db, $file, $row['id']);
                fwrite($file, "\t</Modifier>\n");
            }
            
            $i = 0;
            while ($i < count($subs)) {
                $this->writeModifierClass($db, $file, $subs[$i]);
                $i++;
            }
        }
    }
    
    
    private function writeModifierClass($db, $file, $class)
    {
        $modifier = $db->nodes->get($db->links->getParent($class));
        $code = $db->nodes->get($class)->code;
        if (strpos($code, ':')) {
            $parts = explode(':', $code);
            $code = $parts[1];
        }
        fwrite($file, "\t<ModifierClass modifier=\"" . $modifier->code . "\" code=\"" . $code . "\">\n");
        fwrite($file, "\t\t<SuperClass code=\"" . $modifier->code . "\"/>\n");
        $this->writeSubClasses($db, $file, $class, $subs);
        $this->writeRubrics($db, $file, $class);
        fwrite($file, "\t</ModifierClass>\n");
    }
    
    
    private function writeClasses($db, $file)
    {
        if ($rows = $db->nodes->selectChildren($this->topCategory->id)) {
            $subs = array();
            foreach ($rows as $row) {
                if ($this->getExtensions) {
                    if ($row['id'] == 67) {
                        $this->writeClass($db, $file, $row['id'], $subs);
                    }
                }
                else {
                    $this->writeClass($db, $file, $row['id'], $subs);
                }
            }
            
            $i = 0;
            while ($i < count($subs)) {
                $this->writeClass($db, $file, $subs[$i], $subs);
                $i++;
            }
        }
    }
    
    
    private function writeClass($db, $file, $class, &$subs)
    {
        $node = $db->nodes->get($class);
        if ($this->getCore) {
            $ckind = $db->ckinds->getName($node->kind);
            if (($ckind == "regionalChapter") or ($ckind == "regionalComponent")) {
                // ignore
            }
            else if ((strlen($node->code) != 7) or ($node->code[4] != '.')) {
                fwrite($file, "\t<Class code=\"" . $node->code . "\"");
                fwrite($file, " kind=\"" . $ckind . "\"");
                fwrite($file, ">\n");
                
                $this->writeSuperClasses($db, $file, $class);
                $this->writeSubClasses($db, $file, $class, $subs);
                $this->writeModders($db, $file, $class);
                $this->writeRubrics($db, $file, $class);
                fwrite($file, "\t</Class>\n");
            }
        }
        elseif ($this->getExtensions) {
            $ckind = $db->ckinds->getName($node->kind);
            if (($node->code == "III")
            or ($ckind == "chapter")
            or ($ckind == "component")
            or ($ckind == "regionalChapter")
            or ($ckind == "regionalComponent")) {
                $this->getSubClasses($db, $class, $subs);
            }
            elseif ((strlen($node->code) == 7) and ($node->code[4] == '.')) {
                fwrite($file, "\t<Class code=\"" . $node->code . "\"");
                fwrite($file, " kind=\"" . $ckind . "\"");
                fwrite($file, ">\n");
                
                $this->writeSuperClasses($db, $file, $class);
                $this->writeSubClasses($db, $file, $class, $subs);
                $this->writeModders($db, $file, $class);
                $this->writeRubrics($db, $file, $class);
                fwrite($file, "\t</Class>\n");
            }
        }
        else {
            fwrite($file, "\t<Class code=\"" . $node->code . "\"");
            fwrite($file, " kind=\"" . $db->ckinds->getName($node->kind) . "\"");
            fwrite($file, ">\n");
            
            $this->writeSuperClasses($db, $file, $class);
            $this->writeSubClasses($db, $file, $class, $subs);
            $this->writeModders($db, $file, $class);
            $this->writeRubrics($db, $file, $class);
            fwrite($file, "\t</Class>\n");
        }
    }
    
    
    private function writeSuperClasses($db, $file, $class)
    {
        if ($rows = $db->links->selectParents($class)) {
            $onlyOneSuper = false;
            foreach ($rows as $row) {
                if ($row['head'] != $this->topCategory->id) {
                    if ($this->getExtensions) {
                        if (!$onlyOneSuper) {
                            $onlyOneSuper = true;
                            $node = $db->nodes->get($class);
                            $i = strpos($node->code, '.');
                            $super = substr($node->code, 0, $i);
                            fwrite($file, "\t\t<SuperClass code=\"" . $super . "\"/>\n");
                        }
                    }
                    else {
                        $super = $db->nodes->get($row['head']);
                        fwrite($file, "\t\t<SuperClass code=\"" . $super->code . "\"/>\n");
                    }
                }
            }
        }
    }
    
    
    private function writeSubClasses($db, $file, $class, &$subs)
    {
        if ($rows = $db->nodes->selectChildren($class)) {
            foreach ($rows as $row) {
                if (!in_array($row['id'], $subs)) {
                    $subs[] = $row['id'];
                }
                $node = $db->nodes->get($row['id']);
                $code = $node->code;
                if (strpos($code, ':')) {
                    $parts = explode(':', $code);
                    $code = $parts[1];
                }
                fwrite($file, "\t\t<SubClass code=\"" . $code . "\"/>\n");
            }
        }
    }
    
    
    // to download extensions
    private function getSubClasses($db, $class, &$subs)
    {
        if ($rows = $db->nodes->selectChildren($class)) {
            foreach ($rows as $row) {
                if (!in_array($row['id'], $subs)) {
                    $subs[] = $row['id'];
                }
            }
        }
    }
    
    
    private function writeModders($db, $file, $class)
    {
        if ($rows = $db->modders->select($class)) {
            foreach ($rows as $row) {
                $node = $db->nodes->get($row['modifier']);
                fwrite($file, "\t\t<ModifiedBy code=\"" . $node->code . "\"/>\n");
            }
        }
    }
    
    
    private function writeRubrics($db, $file, $class)
    {
        if ($rows = $db->rubrics->getAllOfClass($class)) {
            foreach ($rows as $row) {
                $rkind = $db->rkinds->getName($row['kind']);
                if (($this->includeHiddenRubrics) and ($rkind[0] == '.')) {
                    $rkind = substr($rkind, 1);
                }
                if ($rkind[0] != '.') {
                    fwrite($file, "\t\t<Rubric kind=\"" . $rkind . "\">\n");
                    fwrite($file, "\t\t\t<Label xml:lang=\"" . $row['language'] . "\">");
                    if ($this->getCore) { // to remove reference from inclusion
                        if ($db->rkinds->getName($row['kind']) == "inclusion") {
                            fwrite($file, $this->removeReference($row['label']));
                        }
                        else {     
                            fwrite($file, $row['label']);
                        }
                    }
                    else {
                        fwrite($file, $row['label']);
                    }
                    fwrite($file, "</Label>\n");
                    fwrite($file, "\t\t</Rubric>\n");
                }
            }
        }
    }
    

    private function removeReference($label)
    {
        $i = strpos($label, "<Reference");
        if ($i) {
            $label = substr($label, 0, $i-1);
        }
        return $label;
    }

}

?>
